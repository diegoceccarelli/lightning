Code Snippets
=======
list:
type: page
snip: diego ceccarelli university of pisa computer science code snippets


====== Bash ======
===== backspace al posto delete ======
screen sclera e mette il delete al posto del backspace,
per mettere a posto You can define an alias in your ~/.bashrc file like
  alias screen='TERM=screen screen'
 
===== classpath java ======
aggiungere tutti i jar in una directory:

  JAR=$(for i in $(ls); do  echo $(pwd)/$i; done | tr "\n" ":").
  
ricorsivo
  JAR=$(find . -type f | sed "s#^.#$(pwd)#" | egrep ".*jar$" | tr "\n" ":" ).
  
===== creare un jar con tutto con mvn ======
aggiungi al pom 
<code>
	<build>
	    <plugins>
	        <plugin>
	            <artifactId>maven-assembly-plugin</artifactId>
	            <configuration>
	                <archive>
	                    <manifest>
	                        <mainClass>fully.qualified.MainClass</mainClass>
	                    </manifest>
	                </archive>
	                <descriptorRefs>
	                    <descriptorRef>jar-with-dependencies</descriptorRef>
	                </descriptorRefs>
	            </configuration>
	        </plugin>
	    </plugins>
	</build>
</code>

quindi compila:
<code>
mvn  assembly:single
</code>
produce un jar (..with-dependences) e quel punto devi importare solo quello.
===== sort con tab come separatore =====
  sort -t$'\t' -k 2 file_da_sortare
  
===== aumentare dimensione memoria virtuale java ===== 
  java -Xmx<size> set maximum Java heap size
  e.g. java -Xmx4196m Pippo
  
===== prendere url rediretta ===== 
  URL=...
  REDIRECT_URL=$(curl -w %{redirect_url} URL) 
 
===== bashrc pompato =====
[[http://www.di.unipi.it/~ceccarel/bashrc|bashrc]]

===== configurare cose da pirate pad ===== 
<code>
curl http://piratepad.net/ep/pad/export/$id/latest?format=txt
</code>

===== cose da istallare su una macchina piallata =====
<code>
# subversion
sudo apt-get install subversion
# JAVA scommentare le line in sources 'parner'
sudo apt-get update
sudo apt-get install sun-java6-jre sun-java6-plugin sun-java6-fonts
sudo apt-get install sun-java6-javadb sun-java6-jre sun-java6-jdk
# Maven
sudo apt-get install maven2
</code>

===== non trova JAVA_HOME =====
export JAVA_HOME="/usr/lib/jvm/java-6-sun-1.6.0.22/"

**ornellaia** ''export JAVA_HOME=/usr/lib/jvm/java-6-sun-1.6.0.24/''

===== script per tirare giù il bibtex =====
[[http://code.activestate.com/recipes/523047-search-google-scholar/]]

===== microblogs =====
  
  * andare su [[http://twitter.com/apps/create]]
  * scazzare e poi client e read and write  
  * installare twurl [[https://github.com/marcel/twurl]]
  * ora con ''twurl -d 'status=hello' /1/statuses/update.xml'' 

===== Fare il dump di un sito a partire da una pagina =====
<code>
wget -r -H -l1 -k -P $targetdir --exclude-domains ${comma-seperated domain name} --user=xxx --password=xxx $url
</code>

===== Tirare giù una pagina con autenticazione ===== 
<code>
url= ""
outpage = ""
user=""
pass=""
curl -u $user:$pass $url >  $outpage
</code>

===== Numero di risultati per una query su google =====
<code>
query=pippo+pluto
results=$(curl -A "Firefox/3.0" http://www.google.com/search?q=$query | egrep -o "About [1234567890,]+ results" | tr -d ' ,Aboutresults')
</code>
===== 10 hints carini =====
http://www.ibm.com/developerworks/linux/library/l-10sysadtips/

===== how to get the sum of all the lines in the file ===== 
<code>
awk '{a+=$0}END{print a}' abc
</code>

===== Staccare il garbage collector in python =====
se usi strutture dati grosse in python, il garbage collector 
può rallentare notevolmente l'esecuzione.. conviene disabilitarlo 
<code>
import gc
gc.disable()
</code>

===== Fare query a solr da terminale =====
[[http://wiki.apache.org/solr/Solrj#EmbeddedSolrServer]]

===== Installare mongoDB su macosx =====
<code>
curl -O http://downloads.mongodb.org/osx/mongodb-osx-x86_64-1.4.0.tgz
tar xzf mongodb-osx-x86_64-1.4.0.tgz
sudo mv mongodb-osx-x86_64-1.4.0 /usr/local/mongodb
sudo mkdir /usr/local/mongodb_data /var/log/mongodb
sudo chown -R root /usr/local/mongodb
</code>
(If you’re on a 32-bit machine, substitute in i386 for each x86_64 above.)


Next, you’ll want to make a config file so you can change the server’s options without fiddling with command-line arguments.

Save as: /usr/local/mongodb/mongod.conf

<code>
# Store data alongside MongoDB instead of the default, /data/db/
dbpath = /usr/local/mongodb_data

# Only accept local connections
bind_ip = 127.0.0.1
</code>


===== Prendere un pezzo di una riga =====
<code>
 awk '{for (i=2; i <= NF; i++) {printf("%s ",$i)} print ":"$1 }
</code>

===== sommare righe con un campo uguale =====
array associativo awk:
<code>
$ cat nayan.out
saman 1
gihan 2
saman 4
ravi 1
ravi 2

$ awk '{arr[$1]+=$2} END {for (i in arr) {print i,arr[i]}}' nayan.out > nayan.out.tmp

$ cat nayan.out.tmp
ravi 3
saman 5
gihan 2
</code>

===== risorse in un jar =====
[[http://stackoverflow.com/questions/1266615/maven-configuration-of-dependency-jar| accedere a una risorsa in un jar ]]

===== eclipse =====
Opening a workspace with several projects, I was presented with the following error for two of the projects:
To resolve this error in eclipse do the following steps.

The resolution was to force a resave of the selected projects (and their .classpath files):

Open the project properties
Select Java Build Path > Libraries
Add a new, arbitrary library (to be deleted later) > OK
Wait for the workspace to refresh (or force a refresh of the project)
The error(s) will go away
Remove the dummy library
The only other references I could find were to make minor alterations of contents of the .classpath file.

===== scaricare tutti i pdf in una pagina =====

  wget -m --accept=pdf -nd  $url
  
===== Iterare sulle linee di un file =====
<code>
while read line
do
echo $line
done < file_to_read
</code>

===== Rimuovere righe bianche da un file =====
<code>
grep -v '^[[:space:]]*$'  file
</code>

===== Change tmp dir in bash sort =====
<code>
sort -T dir ...
</code>

===== Contare numero di caratteri in una linea ===== 

<code>
awk -F'#' '{ print NF-1}' 
</code>

numero di caratteri # nella linea

===== Rimpiazzare una sottostringa in bash =====

<code> 
i=pippo.txt
echo ${i/txt/tex}
#stamp pippo.tex
</code>

===== Ordinare su piu' campi =====
<code>
sort -k 1,1 -k 3,3nr file.tsv > tmp
</code>

ordina sul primo campo e per elementi uguali del primo, sul terzo per numeri decrescenti

===== cancellare tutti i file a dimensione 0 =====
<code>
find . -type f -size 0k -exec rm {} \; | awk '{ print $8 }'
</code>

===== eliminare pcaratteri in una certa posizione in tutte le righe =====
<code>
cut -c44- file
</code>
toglie i primi 44 caratterida tutte le righe

===== scorrere un file di log mentre viene generato =====
<code>
tail -f file -n 
</code>

===== tag cloud da un file ===== 

<code>
cat introduzione.tex capitolo?.tex conclusioni.tex appendix.tex | tr '[A-Z]' '[a-z]' | tr -sc '[a-z]' '\n' | grep -v '^[^a-z]*$' | grep -v '^[\]'  |    sort | grep -vxf ~/stopwords-ita.txt | uniq -c   | sort -nrk1
</code>

===== tr complement =====
<code>
tr -sc '[a-zA-Z]' '\n' < file
</code>
replace all chars that are **not** alphabetic in new lines

===== togliere prime e ultime righe ===== 
<code> 
 sed '1d' filename 
</code>
la prima linea
<code> 
 sed '$d' filename 
</code>
l'ultima linea

===== controllare parametri dati alla bash =====
<code>
# Check for proper number of command line args.

EXPECTED_ARGS=1
E_BADARGS=65

if [ $# -ne $EXPECTED_ARGS ]
then
  echo "Usage: `basename $0` {arg}"
  exit $E_BADARGS
fi
</code>

===== generate all the couples of terms =====

<code>
tr -sc '[a-zA-Z0-9\n]' '\t'  < inputFile | awk '{for (i = 1; i < NF; i++) print $i"\t"$(i+1); }'
</code>

===== trovare un processo su una certa porta ===== 

<code>
sudo netstat -lpn |grep :8080
</code>

===== Check for proper number of command line args ===== 

<code>
EXPECTED_ARGS=1
E_BADARGS=65

if [ $# -ne $EXPECTED_ARGS ]
then
  echo "Usage: `basename $0` {arg}"
  exit $E_BADARGS
fi
</code>

=====  Sort in numeric order with scientific notation allowed	=====
<code>
sort -g
</code>
