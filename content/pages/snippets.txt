Code Snippets
=======
list:
type: page
snip: diego ceccarelli university of pisa computer science code snippets

===== [bash] awk insert blank line every n lines ===== 

    awk '{ if ((NR % 5) == 0) printf("\n"); print; }'

for n == 5, of course. Substitute whatever your idea of n is.
	

===== [bash] convert windows source file to unix =====

	dos2unix *.py

===== [bash] remove first column from a file =====

	cut -f2- filename

===== [bash] replace delete with backspace in screen ======

You can define an alias in your ~/.bashrc file like

  alias screen='TERM=screen screen'
 
===== [java] generate classpath ======
[OLD use maven ;)]
all the jars in a directory: 

  JAR=$(for i in $(ls); do  echo $(pwd)/$i; done | tr "\n" ":").
  
recorsive: 

  JAR=$(find . -type f | sed "s#^.#$(pwd)#" | egrep ".*jar$" | tr "\n" ":" ).
  
===== [maven] create a jar with all the dependecies in maven ======

add this snippet to the code

<code>
	<build>
	    <plugins>
	        <plugin>
	            <artifactId>maven-assembly-plugin</artifactId>
	            <configuration>
	                <archive>
	                    <manifest>
	                        <mainClass>fully.qualified.MainClass</mainClass>
	                    </manifest>
	                </archive>
	                <descriptorRefs>
	                    <descriptorRef>jar-with-dependencies</descriptorRef>
	                </descriptorRefs>
	            </configuration>
	        </plugin>
	    </plugins>
	</build>
</code>

compile using
<code>
mvn  assembly:assembly
</code>
produce a jar (..with-dependences) with all the dependecies

===== [bash] sort using tab as separator =====
  sort -t$'\t' -k 2 file
  
===== [java] change java heap size ===== 
  java -Xmx<size> set maximum Java heap size
  e.g. java -Xmx4196m Pippo
  
===== [bash] resolve redirected url ===== 
  URL=...
  REDIRECT_URL=$(curl -w %{redirect_url} URL) 
 
===== my bashrc  =====
[[http://www.di.unipi.it/~ceccarel/bashrc|bashrc]]

===== [bash] get a txt file edited from pirate pad ===== 
<code>
curl http://piratepad.net/ep/pad/export/$id/latest?format=txt
</code>



===== [java] does not find JAVA_HOME =====
export JAVA_HOME="/usr/lib/jvm/java-6-sun-1.6.0.22/"

**ornellaia** ''export JAVA_HOME=/usr/lib/jvm/java-6-sun-1.6.0.24/''


ello' /1/statuses/update.xml'' 

=====  [bash] dump a website =====
<code>
wget -r -H -l1 -k -P $targetdir --exclude-domains ${comma-seperated domain name} --user=xxx --password=xxx $url
</code>

===== [bash] get a webpage with autentication ===== 
<code>
url= ""
outpage = ""
user=""
pass=""
curl -u $user:$pass $url >  $outpage
</code>

===== [bash] number of results for a query on google =====
<code>
query=pippo+pluto
results=$(curl -A "Firefox/3.0" http://www.google.com/search?q=$query | egrep -o "About [1234567890,]+ results" | tr -d ' ,Aboutresults')
</code>

===== [linux] 10 nice hints =====
http://www.ibm.com/developerworks/linux/library/l-10sysadtips/

===== [bash] how to get the sum of all the lines in the file ===== 
<code>
awk '{a+=$0}END{print a}' abc
</code>

===== [python] remove the garbage collector in python =====
when you are working with big data structure in python the garbage
collector can slow down the exection, sometime is better to disable it 

<code>
import gc
gc.disable()
</code>

===== [bash] how to query solr from the shell =====

[[http://wiki.apache.org/solr/Solrj#EmbeddedSolrServer]]


===== [bash] sum rows with the some field =====
dictionary in awk:
<code>
$ cat nayan.out
saman 1
gihan 2
saman 4
ravi 1
ravi 2

$ awk '{arr[$1]+=$2} END {for (i in arr) {print i,arr[i]}}' nayan.out > nayan.out.tmp

$ cat nayan.out.tmp
ravi 3
saman 5
gihan 2
</code>

===== [maven] resources in a jar =====
[[http://stackoverflow.com/questions/1266615/maven-configuration-of-dependency-jar| maven-configuration-of-dependency-jar ]]



===== [bash] get all pdf in a page =====

  wget -m --accept=pdf -nd  $url
  
===== [bash] iterate over the lines of a jar =====
<code>
while read line
do
echo $line
done < file_to_read
</code>

===== [bash] remove blank lines in a file =====
<code>
grep -v '^[[:space:]]*$'  file
</code>

===== [bash] change tmp folder where sort put temporary files =====
<code>
sort -T dir ...
</code>

===== [bash] print number of a specific char for each line of a file ===== 

<code>
awk -F'#' '{ print NF-1}' 
</code>

prints how many chars '#' per line

===== [bash] replace a substring =====

<code> 
i=pippo.txt
echo ${i/txt/tex}
#stamp pippo.tex
</code>

===== [bash] sort on more than one field =====
<code>
sort -k 1,1 -k 3,3nr file.tsv > tmp
</code>

sort on the first field and if two elements are equals on the first, on the third field in reverse integer order

===== [bash] remove all files of size 0 =====
<code>
find . -type f -size 0k -exec rm {} \; | awk '{ print $8 }'
</code>

===== [bash] remove all chars in a particular position from a file =====
<code>
cut -c44- file
</code>
removes the first 44 characters from all the lines of file

===== [bash] view what is appended on file =====
<code>
tail -f file -n 
</code>

===== [bash] get words distribution from a file ===== 

<code>
cat file | tr '[A-Z]' '[a-z]' | tr -sc '[a-z]' '\n' | grep -v '^[^a-z]*$' | grep -v '^[\]'  |    sort | grep -vxf topwords-ita.txt | uniq -c   | sort -nrk1
</code>

===== [bash] tr complement =====
<code>
tr -sc '[a-zA-Z]' '\n' < file
</code>
replace all chars that are **not** alphabetic in new lines

===== [bash] remove first or last lines ===== 
<code> 
 sed '1d' filename 
</code>
the first line
<code> 
 sed '$d' filename 
</code>
the last line 

===== [bash] check bash parameters =====
<code>
# Check for proper number of command line args.

EXPECTED_ARGS=1
E_BADARGS=65

if [ $# -ne $EXPECTED_ARGS ]
then
  echo "Usage: `basename $0` {arg}"
  exit $E_BADARGS
fi
</code>

===== [bash] Generate all the couples of terms =====

<code>
tr -sc '[a-zA-Z0-9\n]' '\t'  < inputFile | awk '{for (i = 1; i < NF; i++) print $i"\t"$(i+1); }'
</code>

===== [bash] Find a process listening on a particular port ===== 

<code>
sudo netstat -lpn |grep :8080
</code>

===== [bash] Check for proper number of command line args ===== 

<code>
EXPECTED_ARGS=1
E_BADARGS=65

if [ $# -ne $EXPECTED_ARGS ]
then
  echo "Usage: `basename $0` {arg}"
  exit $E_BADARGS
fi
</code>

=====  [bash] Sort in numeric order with scientific notation allowed	=====
<code>
sort -g
</code>
